IPP=/opt/intel/ipp/5.3/ia32

EVLIB = $(EASYVISION)/lib/

CDIR = $(EVLIB)/ImagProc/Ipp

CONTRIBPATH = $(EVLIB)/ImagProc/C
CONTRIB = $(CONTRIBPATH)/Segments/libsegments.a \
          $(CONTRIBPATH)/burns/burns.o

LIBS = -i$(EVLIB) $(CDIR)/auxIpp.o $(CDIR)/adapt.o \
       -L$(CONTRIBPATH)/Segments -lsegments \
       -i$(CONTRIBPATH)/burns $(CONTRIBPATH)/burns/burns.o $(CONTRIBPATH)/burns/bitmap.o \
       -L$(IPP)/sharedlib -lguide -lippcore -lippi -lipps -lippcc -lippvc -lippcv

all: $(ALL) 

%: %.hs auxc
	@ghc -threaded --make $< -o $@ $(LIBS)

auxc: $(CDIR)/auxIpp.o $(CDIR)/adapt.o $(CONTRIB)

$(CDIR)/auxIpp.o: $(CDIR)/auxIpp.c $(CDIR)/auxIpp.h
	gcc -O4 -c -I$(IPP)/include $(CDIR)/auxIpp.c -o $(CDIR)/auxIpp.o

$(CDIR)/adapt.o: $(CDIR)/adapter.hs $(CDIR)/functions.txt
	cd $(CDIR); ghc -O --make adapter; ./adapter; cd -
	gcc -O4 -c -I$(IPP)/include $(CDIR)/adapt.c -o $(CDIR)/adapt.o

$(CONTRIBPATH)/Segments/libsegments.a:
	cd $(CONTRIBPATH)/Segments/; make

$(CONTRIBPATH)/burns/burns.o:
	cd $(CONTRIBPATH)/burns/; make Burns.o

clean:
	rm -f $(ALL) *.o *.hi

cleanall:
	rm -f $(ALL) *.o *.hi \
        $(EVLIB)*.o              $(EVLIB)*.hi \
        $(EVLIB)EasyVision/*.o   $(EVLIB)EasyVision/*.hi \
        $(EVLIB)ImagProc/*.o     $(EVLIB)ImagProc/*.hi \
        $(EVLIB)ImagProc/Ipp/*.o $(EVLIB)ImagProc/Ipp/*.hi \
        $(EVLIB)Vision/*.o       $(EVLIB)Vision/*.hi \
        $(EVLIB)Classifier/*.o   $(EVLIB)Classifier/*.hi
